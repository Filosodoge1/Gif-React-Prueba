{"version":3,"sources":["Componentes/AddCategory.jsx","helpers/getGif.js","Componentes/GifItem.jsx","Componentes/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","onNewCategory","useState","first","setfirst","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","Gifapi","gif","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifItem","className","src","alt","GifGrid","category","image","setimage","isLoading","setisLoading","arreglosImg","newImg","useEffect","useFetchGifs","imagen","Funcion","Categories","setCategories","ca","newCategory","includes","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAgBF,OACE,uBAAMC,SAXa,SAACC,GAChBA,EAAEC,iBAGEJ,EAAMK,OAAOC,OAAS,GAEtBR,EAAcE,EAAMK,OAE3B,EAGD,UACI,uBAAOE,KAAK,OAAOC,MAAOR,EAAOS,SAhBf,SAACN,GACnBF,EAASE,EAAEO,OAAOF,MACrB,IAeG,mCAAMR,EAAN,SAGP,E,sBC5BYW,EAAM,iDAAG,WAAMC,GAAN,gGACZC,EADY,0FAC6ED,EAD7E,sBAECE,MAAMD,GAFP,cAEZE,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,MAAK,CAC7BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,IAHT,IAK1BY,QAAQC,IAAIR,GATM,kBAWXA,GAXW,4CAAH,sDCGNS,EAAU,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAClC,OACE,sBAAKe,UAAU,OAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKR,IACpB,4BAAIA,MAGX,ECDYS,EAAU,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEvB,ECR0B,SAACA,GAEzB,MAA0BjC,mBAAS,IAAnC,mBAAOkC,EAAP,KAAcC,EAAd,KACA,EAAkCnC,oBAAS,GAA3C,mBAAOoC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,iDAAG,8GACK1B,EAAOqB,GADZ,OACVM,EADU,OAEhBJ,EAASI,GACTF,GAAa,GAHG,2CAAH,qDAUjB,OAJEG,qBAAU,WACRF,GACD,GAAE,IAEC,CACFJ,MAAOA,EACPE,UAAWA,EAElB,CDX4BK,CAAaR,GAAjCC,EAAP,EAAOA,MAAOE,EAAd,EAAcA,UAad,OACE,qCACI,6BAAKH,IAOHG,GAAc,6CAGhB,qBAAKP,UAAU,YAAf,SAEIK,EAAMd,KAAK,SAACsB,GAAD,OAET,cAAC,EAAD,eAA6BA,GAAfA,EAAOpB,GAFZ,QAQtB,EEtCYqB,EAAU,SAAC,GAAY,EAAXlC,MAAY,IAEjC,EAAkCT,mBAAS,CAAC,gBAA5C,mBAAK4C,EAAL,KAAiBC,EAAjB,KAQA,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAa9C,cAAgB,SAAC+C,GAAD,OAXlBC,EAWoCD,OAV/CF,EAAWI,SAASD,KACxBF,EAAc,GAAD,mBAAKD,GAAL,CAAiBG,KAC9BrB,QAAQC,IAAI,OAAQoB,KAHN,IAACA,CAWkB,IAE7B,mCAEQH,EAAWxB,KAAI,SAAAa,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,EAAlB,QAK1C,EC1BYgB,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACD,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,CAAS7C,MAAO,W","file":"static/js/main.3a15c997.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({onNewCategory}) => {\r\n\r\n    // const [first, setfirst] = useState('Hola mundo');\r\n    const [first, setfirst] = useState('');\r\n\r\n    const insertartexto = (e) =>{\r\n        setfirst(e.target.value);\r\n    }\r\n\r\n    const funcsubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(setCategories);\r\n        // setCategories(cats => [...cats, first]);\r\n        if (first.trim().length > 2) {\r\n            // setCategories( cats => [...cats, first]);\r\n            onNewCategory(first.trim());\r\n        }\r\n    }\r\n\r\n  return (\r\n    <form onSubmit={funcsubmit}>\r\n        <input type=\"text\" value={first} onChange={insertartexto} />\r\n        <h2> {first} </h2>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    onNewCategory: PropTypes.func.isRequired\r\n}","export const Gifapi = async(gif) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Ora2a1BRyp5v2EqVo4qAEkqeR2GJ4p6T&q=${gif}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => ({\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    }) );\r\n    console.log(gifs);\r\n\r\n    return gifs;\r\n    \r\n  }\r\n","// import React from 'react'\r\nimport '../index.css'\r\n\r\nexport const GifItem = ({id, title, url}) => {\r\n  return (\r\n    <div className='card'>\r\n        <img src={url} alt={title}></img>\r\n        <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","// import React from 'react'\r\n\r\n// import { useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import { Gifapi } from \"../helpers/getGif\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifItem } from \"./GifItem\";\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n  \r\n  const {image, isLoading} = useFetchGifs(category);\r\n  \r\n  // const [first, setfirst] = useState([]);\r\n\r\n  \r\n  \r\n  /* OTRA FORMA DE REALIZARLO\r\n  useEffect(() => {\r\n    Gifapi(category)\r\n    .then( newImages => setfirst(newImages));\r\n  \r\n  }, []);\r\n  */\r\n  return (\r\n    <>\r\n        <h1>{category}</h1>\r\n\r\n        {/* {\r\n          isLoading ? <h2>Cargando...</h2>:null\r\n        } */}\r\n\r\n        {\r\n          isLoading && (<h2>Cargando...</h2>)\r\n        }\r\n\r\n        <div className='card-grid'>\r\n          {\r\n            image.map( (imagen) => (\r\n              \r\n              <GifItem key={imagen.id} {...imagen}/>\r\n            ))\r\n          }\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { Gifapi } from '../helpers/getGif';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  \r\n    const [image, setimage] = useState([]);\r\n    const [isLoading, setisLoading] = useState(true);\r\n\r\n    const arreglosImg = async() => {\r\n        const newImg = await Gifapi(category); \r\n        setimage(newImg);\r\n        setisLoading(false);\r\n      }\r\n    \r\n      useEffect(() => {\r\n        arreglosImg();\r\n      }, []);\r\n  \r\n    return{ \r\n        image: image,\r\n        isLoading: isLoading\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AddCategory, GifGrid } from './Componentes';\r\n\r\n// import { AddCategory } from \"./Componentes/AddCategory\";\r\n// import { GifGrid } from \"./Componentes/GifGrid\";\r\n\r\n\r\nexport const Funcion = ({value}) => {\r\n\r\n    let [Categories, setCategories] = useState(['dragon ball']);\r\n\r\n    const bingresar = (newCategory) => {\r\n        if (Categories.includes(newCategory)) return;\r\n        setCategories([...Categories, newCategory]);\r\n        console.log('hola', newCategory);\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n\r\n            <AddCategory onNewCategory={ (ca) => bingresar(ca)} />\r\n\r\n            <>\r\n                {\r\n                    Categories.map(category => <GifGrid key={category} category={category} />)\r\n                }\r\n            </>\r\n        </>\r\n    );\r\n};\r\n\r\n//export default Funcion;\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n// const GifExpertApp = props => {\r\n//   return (\r\n//     <>\r\n//         <h2>GifExpertApp</h2>\r\n//         <hr />\r\n//     </>\r\n    \r\n//   )\r\n// }\r\n\r\n// GifExpertApp.propTypes = {}\r\n\r\n// export default GifExpertApp","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport { Funcion } from './GifExpertApp';\r\n//import GifExpertApp from './GifExpertApp';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <React.StrictMode>\r\n        <Funcion value={'hola'}/>\r\n    </React.StrictMode>\r\n    \r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}